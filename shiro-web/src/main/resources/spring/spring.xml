<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="classpath:spring/spring-dao.xml"></import>
    <import resource="classpath:spring/spring-redis.xml"></import>
    <context:component-scan base-package="com.jjh"></context:component-scan>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="login.html"/>
        <property name="unauthorizedUrl" value="403.html"/>
        <property name="filterChainDefinitions">
            <!--
            anon 表示不用验证
            roles["",""...]配置访问的url需要验证的角色，包含所有才通过
            perms["",""...]配置访问的url需要验证的权限，包含所有才通过
            authc 表示需要用户登录
            -->
            <value>
                /login.html = anon
                /subLogin = anon
                /testRole1= roles["admin"]
                /testRole2= roles["admin11"]
                /testRole3= customRolesFilter["admin","admin11"]
                /testPerm1 = perms["user:delete","user:update","user:insert"]
                /testPerm2 = perms["user:insert"]
                /* = user
                <!--/* = user 配置user时，记住我不需要重新输入账号密码-->
                <!--/* = authc 必须验证账号密码，记住我不生效-->
            </value>
        </property>
        <property name="filters">
            <util:map>
                <entry key="customRolesFilter" value-ref="rolesOr"/>
            </util:map>
        </property>
    </bean>

    <!--自定义的role过滤器-->
    <bean id="rolesOr" class="com.jjh.filter.RolesOrFilter"/>

    <!--创建SecurityMananger对象-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--设置自定义Realm-->
        <property name="realm" ref="realm"/>
        <!--设置自定义的Session管理器  配置了记住我，测试记住我功能时请注释-->
        <property name="sessionManager" ref="sessionManager"/>
        <!--设置自定义的Cache管理器 配置了记住我，测试记住我功能时请注释-->
        <property name="cacheManager" ref="cacheManager"/>
        <property name="rememberMeManager" ref="cookieRememberMeManager"/>
    </bean>

    <!--定义自定义的Realm-->
    <bean id="realm" class="com.jjh.myshiro.realm.CustomRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!--设置加密的算法-->
    <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"
          id="credentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
    </bean>

    <!-- SessionManage-->
    <bean class="com.jjh.session.CustomSessionManager"
          id="sessionManager">
        <property name="sessionDAO" ref="redisSessionDao"/>
    </bean>

    <bean class="com.jjh.session.RedisSessionDao" id="redisSessionDao"/>

    <bean class="com.jjh.cache.RedisCacheManager" id="cacheManager"/>

    <bean class="org.apache.shiro.web.mgt.CookieRememberMeManager"
          id="cookieRememberMeManager">
        <property name="cookie" ref="simpleCookie"/>

    </bean>

    <bean class="org.apache.shiro.web.servlet.SimpleCookie" id="simpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="maxAge" value="20000000"/>
    </bean>


</beans>